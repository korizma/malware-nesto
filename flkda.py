import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def uzmi_k(ele, k):
    return ele[k]

def klase(column):
    jed_el = np.unique(column)
    lista = list()

    for a in column:
        for k in range(jed_el.shape[0]):
            if (a == jed_el[k]):
                lista.append(k)
                break
    column = lista

def skiniRed(matrica, index):
    np.delete(matrica, obj=index, axis=0)

def kolonaCiscenje(data, index_f, kolicina_bris, features):
    if (kolicina_bris == 0):
        return
    n = data.shape[0] - 1
    for i in range(kolicina_bris):
        skiniRed(data, n - i)





dataf = pd.read_csv("MalwareData.csv", sep='|')

features1 = list()
for ime in dataf:
    features1.append(ime)
dataf =  dataf.to_numpy()

pK = dataf.shape[0]      #broj redova u df
featureLen = dataf.shape[1]

columns = [
    #['index', 'brisanje_duzina', 'klasa'],
    [0, 0, 0],
    [1, 0, 0],
    [2, 0, 1],
    [3, 0, 1],
    [4, 0, 1],
    [5, 0, 1],
    [6, 0, 1],
    [7, pK - 138040, 0],
    [8, pK - 138030, 0],
    [9, pK - 138020, 0],
    [10, pK - 138014, 0],
    [11, pK - 137991, 0],
    [12, pK - 138002, 0],
    [13, pK - 138030, 0],
    [14, 0, 1],
    [15, 0, 1],
    [16, 0, 1],
    [17, 0, 1],
    [18, 0, 1],
    [19, 0, 1],
    [20, 0, 1],
    [21, 0, 1],
    [22, pK - 138012, 0],
    [23, 0, 1],
    [24, pK - 136849, 1],
    [25, 0, 1],
    [26, 0, 1],
    [27, pK - 137104, 1],
    [28, pK - 137950, 1],
    [29, 0, 1],
    [30, 0, 1],
    [31, 0, 1],
    [32, 0, 1],
    [33, 0, 0],
    [34, 0, 0],
    [35, 0, 0],
    [36, 0, 0],
    [37, pK - 137959, 0],
    [38, pK - 137737, 0],
    [39, pK - 138000, 0],
    [40, pK - 137850, 0],
    [41, pK - 137290, 0],
    [42, pK - 137933, 0],
    [43, 0, 1],
    [44, 0, 1],
    [45, 0, 1],
    [46, pK - 136500, 0],
    [47, pK - 136800, 0],
    [48, 0, 0],
    [49, 0, 0],
    [50, 0, 0],
    [51, pK - 138012, 0],
    [52, pK - 137961, 0],
    [53, pK - 137848, 0],
    [54, 0, 1],
    [55, 0, 1],
    [56, 0, 0],
]
columns = np.array(columns)
columns = columns[:, 1:3]

for i in range(featureLen):
    kolonaCiscenje(dataf, i, columns[i][0], features1)
    if columns[i][1] == 1:
        klase(dataf[:, i])

print(dataf)
print(dataf.shape)
"""kol = dataf[:, 11]

klase(kol)

k = np.sort(kol)
plt.plot(k, 'bo')
plt.show()
"""


