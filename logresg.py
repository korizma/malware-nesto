import numpy as np
import pandas as pd

def sigmoid(x):
        return 1 / (np.exp(-x) + 1)

def crossEntropy(y, yCap):
    return -np.sum(y*np.log(yCap))

def logicisticRegression(x, y, br_iteracija):
    featuresLen = data.shape[1]
    w = np.random.rand(featuresLen, 1)
    for i in range(br_iteracija):
        z = np.matmil(x, w)
        yCap = sigmoid(z)
        L = crossEntropy(y, yCap)
        dl_sa_dyCap = -(y/yCap) + (1-y)/(1-yCap)
        dyCap_sa_dz = sigmoid(yCap)*(1 - sigmoid(yCap))
        dw = np.matmil(x, dl_sa_dyCap*dyCap_sa_dz)
        w -= dw
    return w, L, yCap
